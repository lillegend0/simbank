import os
import json
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, timezone
from typing import Dict, Tuple
from config import SIMBANK_IP, USERNAME, PASSWORD, BOT_TOKEN, CHAT_ID, PORT, STATUS_FILE
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())
LOG_FILE = os.getenv("LOG_FILE", "status.log")
MOSCOW_TZ = timezone(timedelta(hours=3))

def ensure_log_dir():
    log_dir = os.path.dirname(LOG_FILE)
    if log_dir:
        os.makedirs(log_dir, exist_ok=True)

def log(message: str):
    ensure_log_dir()
    timestamp = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S")
    try:
        with open(LOG_FILE, "a") as f:
            f.write(f"[{timestamp}] {message}\n")
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

def send_telegram(message: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        resp = requests.post(url, json=payload)
        resp.raise_for_status()
    except requests.exceptions.RequestException as e:
        error = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e} - –û—Ç–≤–µ—Ç: {getattr(resp, 'text', '')}"
        print(error)
        log(f"‚ùó {error}")

def get_status_page() -> str:
    url = f"{SIMBANK_IP}/default/en_US/status.html"
    try:
        response = requests.get(url, auth=(USERNAME, PASSWORD), timeout=15)
        if response.status_code == 401:
            return "ERROR: Unauthorized (401)"
        response.raise_for_status()
        return response.text
    except Exception as e:
        return f"ERROR: {e}"

def parse_status(html: str) -> Tuple[str, Dict[str, str]]:
    soup = BeautifulSoup(html, "html.parser")

    def extract(id_: str) -> str:
        el = soup.find(id=id_)
        text = el.text.strip() if el else ""
        return text if text else "N"

    statuses = {
        "gsm_sim": extract(f"l{PORT}_gsm_sim"),
        "module_status": extract(f"l{PORT}_module_status"),
        "gsm_status": extract(f"l{PORT}_gsm_status"),
        "status_line": extract(f"l{PORT}_status_line"),
    }

    summary = (
        f"üß© <b>–°—Ç–∞—Ç—É—Å SIM-–∫–∞—Ä—Ç—ã (–ø–æ—Ä—Ç {PORT}):</b>\n"
        f"üìç SIM Inserted: <code>{statuses['gsm_sim']}</code>\n"
        f"üîó Module Status: <code>{statuses['module_status']}</code>\n"
        f"‚ö† GSM Status: <code>{statuses['gsm_status']}</code>\n"
        f"üì° Status Line: <code>{statuses['status_line']}</code>"
    )

    return summary, statuses

def load_previous() -> Dict[str, Dict[str, str]]:
    if os.path.exists(STATUS_FILE):
        try:
            with open(STATUS_FILE, "r") as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
    return {}

def save_statuses(data: Dict[str, Dict[str, str]]):
    try:
        with open(STATUS_FILE, "w") as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        log(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")

def monitor():
    previous = load_previous()
    html = get_status_page()

    if html.startswith("ERROR"):
        send_telegram(f"‚ùó <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:</b>\n<code>{html}</code>")
        log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML: {html}")
        return

    summary, current = parse_status(html)
    now = datetime.now(timezone.utc)
    now_iso = now.isoformat()

    alerts = []
    updated = {}

    for key, value in current.items():
        prev = previous.get(key, {})
        prev_val = prev.get("value", "N")
        since_str = prev.get("since", now_iso)
        since = datetime.fromisoformat(since_str)
        alert_sent = prev.get("alert_sent", False)

        curr_norm = value or "N"
        prev_norm = prev_val or "N"

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Ñ–ª–∞–≥
        if curr_norm != prev_norm:
            since = now
            alert_sent = False
            log(f"{key} –∏–∑–º–µ–Ω–∏–ª—Å—è: {prev_norm} ‚Üí {curr_norm}")

        # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "N" ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        if curr_norm == "N":
            duration = now - since
            if duration >= timedelta(minutes=2):
                if not alert_sent:
                    alerts.append(f"‚ùå <b>{key}</b> –æ—Ç–∫–ª—é—á–µ–Ω–æ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç.")
                    alert_sent = True
                    log(f"{key} –æ—Ç–∫–ª—é—á–µ–Ω–æ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç")
            else:
                log(f"{key} –æ—Ç–∫–ª—é—á–µ–Ω–æ –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ.")
        else:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ "N"
            if prev_norm == "N":
                log(f"{key} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è 2 –º–∏–Ω—É—Ç ‚Äî –∞–ª–µ—Ä—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è.")
            alert_sent = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

        updated[key] = {
            "value": curr_norm,
            "since": since.isoformat(),
            "alert_sent": alert_sent
        }

    if alerts:
        send_telegram("\n".join(alerts) + "\n\n" + summary)
        log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + " | ".join(alerts))
    else:
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ 2 –º–∏–Ω—É—Ç—ã.")
        log("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ 2 –º–∏–Ω—É—Ç—ã.")

    save_statuses(updated)

if __name__ == "__main__":
    monitor()